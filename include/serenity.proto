/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
* Proto for serenity framework. Describes Input and the Output of the whole flow
* and internal messages
*/

//Because serenity is a separate project, you have to copy mesos.proto to same directory
import "mesos.proto";

package mesos;

option java_package = "org.apache.mesos";
option java_outer_classname = "Protos";


/**
* NOTE: These proto buffers should be upstreamed - it defines
* external communication (slave -> serenity -> slave)
*/


/**
* Contains resource usage for running executors
*/
message Usage {
 repeated ResourceUsage resource_usage = 1;
}


/**
* Contains slack resources which can be offered for BE tasks
*/
message Slack {
  repeated Resource resources = 1;
}


/**
 * NOTE: Waiting to be upstreamed!
 * Describes a message between the QoS Controller and slave.
 * The QoS Controller makes some decisions and informs slave
 * that some particular corrections has to be made.
 */
message QoSCorrections {

  // Each correction contains information about executor
  // or task and the type of corrective action we want to
  // perform.
  message Correction {

    // NOTE: In future we can define more actions, but
    // for now we have:
    // 1) kill - terminate the executor or task
    enum Action {
      KILL = 1;
    }

    required Action action = 1;
    optional ExecutorID executor_id = 2;
    optional TaskID task_id = 3;
    optional string reason = 4;
    optional double timestamp = 5;
  }

  repeated Correction corrections = 1;
}


/**
* Necessary union to define executor or
* both executor and task
*/
message WorkID {
  //One or both of the following will be filled in
  optional ExecutorID executor = 1;
  optional TaskID task = 2;
}


/**
* Describes resource contention and noisy neighbour situation.
* It describes certain type of resource starvation (cpu, cache, io)
* and the victim of starvation (only a PR task is applicable).
* If possible, it also points the probably aggressor executor or tasks.
*/
message Contention{
  enum Type {
    CACHE = 1;
    CPU = 2;
    IO = 3;
    NETWORK = 4;
  }
  optional WorkID victim = 1;
  optional WorkID aggressor = 2;
  optional Type type = 3;
  optional double timestamp = 4;
  optional float severity = 5;
}
